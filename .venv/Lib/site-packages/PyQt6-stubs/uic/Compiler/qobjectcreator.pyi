from typing import Any

from .as_string import as_string as as_string
from .indenter import write_code as write_code
from .qtproxies import Literal as Literal
from .qtproxies import QtGui as QtGui
from .qtproxies import QtWidgets as QtWidgets
from .qtproxies import strict_getattr as strict_getattr

logger: Any
DEBUG: Any

class _QtWrapper:
    @classmethod
    def search(cls, name): ...

class _QtGuiWrapper(_QtWrapper):
    module: Any

class _QtWidgetsWrapper(_QtWrapper):
    module: Any

class _ModuleWrapper:
    def __init__(self, name, classes) -> None: ...
    def search(self, cls): ...

class _CustomWidgetLoader:
    def __init__(self) -> None: ...
    def addCustomWidget(self, widgetClass, baseClass, module) -> None: ...
    def search(self, cls): ...

class CompilerCreatorPolicy:
    def __init__(self) -> None: ...
    def createQtGuiWidgetsWrappers(self): ...
    def createModuleWrapper(self, name, classes): ...
    def createCustomWidgetLoader(self): ...
    def instantiate(self, clsObject, objectname, ctor_args, is_attribute: bool = ..., no_instantiation: bool = ...): ...
    def invoke(self, rname, method, args): ...
    def getSlot(self, object, slotname): ...
    def asString(self, s): ...
